generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Aka {
  id_aka        Int      @id @default(autoincrement())
  ordering      Int
  title         String
  region        String?
  language      String?
  types         String?
  attributes    String?
  isOriginalTitle Boolean @default(false)
  media         Media    @relation(fields: [mediaId], references: [id_media])
  mediaId       Int
}

model Rating {
  id_rating      Int     @id @default(autoincrement())
  averageRating  Float
  numVotes       Int
  media          Media?  @relation(fields: [mediaId], references: [id_media])
  mediaId        Int?
}

model Episode {
  id_episode      Int     @id @default(autoincrement())
  parentTconst    String?
  seasonNumber    Int?
  episodeNumber   Int?
  media           Media?  @relation(fields: [mediaId], references: [id_media])
  mediaId         Int?
}

model Media {
  id_media        Int         @id @default(autoincrement())
  titleType       String
  primaryTitle    String
  originalTitle   String?
  isAdult         Boolean     @default(false)
  startYear       Int?
  endYear         Int?
  runtimeMinutes  Int?
  
  // Relations
  akas            Aka[]
  ratings         Rating[]
  episodes        Episode[]
  categories      MediaCategorie[]
  genres          MediaGenre[]
  principals      Principal[]
  connuPour       ConnuPour[]
}

model Categorie {
  id_categorie    Int              @id @default(autoincrement())
  nom_categorie   String
  medias          MediaCategorie[]
}

model MediaCategorie {
  media           Media      @relation(fields: [mediaId], references: [id_media])
  mediaId         Int
  categorie       Categorie  @relation(fields: [categorieId], references: [id_categorie])
  categorieId     Int

  @@id([mediaId, categorieId])
}

model Genre {
  id_genre        Int          @id @default(autoincrement())
  nom_genre       String
  medias          MediaGenre[]
}

model MediaGenre {
  media           Media      @relation(fields: [mediaId], references: [id_media])
  mediaId         Int
  genre           Genre      @relation(fields: [genreId], references: [id_genre])
  genreId         Int

  @@id([mediaId, genreId])
}

model Personne {
  id_name          Int           @id @default(autoincrement())
  primary_name     String
  birth_year       Int?
  death_year       Int?
  profession       String?
  
  // Relations
  principals       Principal[]
  connuPour        ConnuPour[]
  dirigeFilms      Directeur[]
  ecrits           Ecrivain[]
}

model Principal {
  ordering         Int
  job              String?
  characters       String?
  
  // Relations
  media            Media       @relation(fields: [mediaId], references: [id_media])
  mediaId          Int
  personne         Personne    @relation(fields: [personneId], references: [id_name])
  personneId       Int

  @@id([mediaId, personneId])
}

model ConnuPour {
  media            Media       @relation(fields: [mediaId], references: [id_media])
  mediaId          Int
  personne         Personne    @relation(fields: [personneId], references: [id_name])
  personneId       Int

  @@id([mediaId, personneId])
}

model Crew {
  id_crew          Int          @id @default(autoincrement())
  
  // Relations - directeurs et Ã©crivains
  directeurs       Directeur[]
  ecrivains        Ecrivain[]
}

model Directeur {
  crew             Crew         @relation(fields: [crewId], references: [id_crew])
  crewId           Int
  personne         Personne     @relation(fields: [personneId], references: [id_name])
  personneId       Int

  @@id([crewId, personneId])
}

model Ecrivain {
  crew             Crew         @relation(fields: [crewId], references: [id_crew])
  crewId           Int
  personne         Personne     @relation(fields: [personneId], references: [id_name])
  personneId       Int

  @@id([crewId, personneId])
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}